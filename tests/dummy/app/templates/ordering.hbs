<p>
  Yeti table columns are sortable by default. Try to click the above tables headers.
  You can disable sorting in any column by passing <code>orderable=false</code>
  to any column definition.
</p>

{{#yeti-table data=data as |yeti|}}

  {{#yeti.table as |table|}}
    {{#table.header as |header|}}
      {{#header.column prop="firstName"}}
        First name
      {{/header.column}}
      {{#header.column prop="lastName"}}
        Last name
      {{/header.column}}
      {{#header.column prop="points"}}
        Points
      {{/header.column}}
    {{/table.header}}

    {{table.body}}
  {{/yeti.table}}

{{/yeti-table}}

<p>
  If you need to specify an order by default, you can pass in <code>sortProperty</code> and
  <code>sortDirection</code>. <code>sortDirection</code> can be <code>asc</code> or
  <code>desc</code> strings but it defaults to <code>asc</code>.
</p>

<p>
  Note that updating these properties will also update the ordering of the table. Also,
  if you update an object's property which the table is sorted on, the table ordering
  will update accordingly.
</p>

<p>
  It is very common to customize the column header based on the sorting status of that column.
  Yeti table provides two approaches for this customization:
</p>

<dl>
  <dt>css classes</dt>
  <dd>
    When a column is ordered ascending, it will have the <code>yeti-table-sorted-asc</code> class.
    When a column is ordered descending, it will have the <code>yeti-table-sorted-desc</code> class.
  </dd>
  <dt>yielded hash</dt>
  <dd>
    Every <code>\{{#header.column}}</code> component will yield a hash of booleans: <code>isSorted</code>,
    <code>isAscSorted</code> and <code>isDescSorted</code>. You can use these to customize the rendering
    of the column yourself.
  </dd>
</dl>

{{#yeti-table data=data sortProperty="points" as |yeti|}}

  {{#yeti.table as |table|}}
    {{#table.header as |header|}}
      {{#header.column prop="firstName" as |column|}}
        First name {{if column.isAscSorted "(sorted asc)"}} {{if column.isDescSorted "(sorted desc)"}}
      {{/header.column}}
      {{#header.column prop="lastName" as |column|}}
        Last name {{if column.isAscSorted "(sorted asc)"}} {{if column.isDescSorted "(sorted desc)"}}
      {{/header.column}}
      {{#header.column prop="points" as |column|}}
        Points {{if column.isAscSorted "(sorted asc)"}} {{if column.isDescSorted "(sorted desc)"}}
      {{/header.column}}
    {{/table.header}}

    {{table.body}}
  {{/yeti.table}}

{{/yeti-table}}

<h2>Advanced sorting</h2>

<p>
  Sometimes we have more advanced ordering requirements. Yeti table uses the <code>sort</code>
  macro from <code>@ember/object/computed</code>
  (<a href="https://emberjs.com/api/ember/3.0/functions/@ember%2Fobject%2Fcomputed/sort" target="_blank">docs here</a>)
  under the hood and exposes the sort definition as the <code>sortDefinition</code> property.
</p>

<p>
  Let's say we way to sort by firstName ascending and then lastName descending. We could pass
  <code>sortDefinition="firstName:asc lastName:desc"</code> string to yeti-table. Yeti table
  takes care of splitting the string
</p>

{{#yeti-table data=advancedSortingData sortDefinition="firstName lastName:desc" as |yeti|}}

  {{#yeti.table as |table|}}
    {{#table.header as |header|}}
      {{#header.column prop="firstName"}}
        First name
      {{/header.column}}
      {{#header.column prop="lastName"}}
        Last name
      {{/header.column}}
      {{#header.column prop="points"}}
        Points
      {{/header.column}}
    {{/table.header}}

    {{table.body}}
  {{/yeti.table}}

{{/yeti-table}}

<p>
  Notice that the last names are sorting descending for the same first name.
</p>

<p>
  Column header classes, yielded sort status and clickable columns <strong>do not apply</strong>
  in this advanced ordering scenario. Let's chat a bit if you want to support this.
</p>